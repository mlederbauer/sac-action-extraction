from pathlib import Path
from typing import Tuple

import click
import pandas as pd
from paragraph2actions.analysis import (
    action_string_validity,
    full_sentence_accuracy,
    levenshtein_similarity,
    modified_bleu,
    partial_accuracy,
)
from rxn.utilities.files import load_list_from_file

from .utils import load_converter


@click.command()
@click.option(
    "--ground_truth_file",
    "-g",
    required=True,
    help="File containing the ground truth",
    type=click.Path(exists=True, path_type=Path),
)
@click.option(
    "--prediction_files",
    "-p",
    multiple=True,
    type=click.Path(exists=True, path_type=Path),
    help="File containing the translations to compare with the ground truth",
)
@click.option(
    "--output_csv",
    "-o",
    type=click.Path(writable=True, path_type=Path),
    help="Where to save the resutls (as CSV)",
)
def calculate_metrics(
    ground_truth_file: Path, prediction_files: Tuple[Path, ...], output_csv: Path
) -> None:
    """Calculate metrics for predictions generated by one or several translation models"""

    ground_truth = load_list_from_file(ground_truth_file)

    converter = load_converter()

    predictions = []
    for prediction_file in prediction_files:
        predictions.append(load_list_from_file(prediction_file))

    metrics = []

    for filename, p in zip(prediction_files, predictions):
        metrics.append(
            {
                "model": filename.name,
                "Full sentence accuracy": full_sentence_accuracy(ground_truth, p),
                "String validity": action_string_validity(p, converter=converter),
                "BLEU": modified_bleu(ground_truth, p),
                "Levenshtein": levenshtein_similarity(ground_truth, p),
                "100% accuracy": partial_accuracy(ground_truth, p, 1.0),
                "90% accuracy": partial_accuracy(ground_truth, p, 0.9),
                "75% accuracy": partial_accuracy(ground_truth, p, 0.75),
            }
        )

    df = pd.DataFrame(data=metrics)
    df.to_csv(output_csv, index=False)


if __name__ == "__main__":
    calculate_metrics()
